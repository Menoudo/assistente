package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"gopkg.in/telebot.v3"
	"telegram-bot-assistente/config"
)

func main() {
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	bot, err := telebot.NewBot(telebot.Settings{
		Token:  cfg.TelegramBotToken,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		log.Fatalf("Failed to create bot: %v", err)
	}

	log.Printf("Authorized as @%s", bot.Me.Username)

	setupHandlers(bot)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	go func() {
		log.Println("Bot started and ready...")
		bot.Start()
	}()

	waitForShutdown(func() {
		cancel()
		bot.Stop()
	})
	log.Println("Bot stopped")
}

func setupHandlers(bot *telebot.Bot) {
	bot.Handle("/start", func(c telebot.Context) error {
		text := "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Assistant Bot!\n\n" +
			"–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
			"/help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n" +
			"/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n" +
			"/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n" +
			"/done - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"
		
		log.Printf("Message from @%s: %s", c.Sender().Username, c.Text())
		return c.Send(text)
	})

	bot.Handle("/help", func(c telebot.Context) error {
		text := "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
			"/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
			"/add \"–æ–ø–∏—Å–∞–Ω–∏–µ\" —Å—Ä–æ–∫: –ì–ì–ì–ì-–ú–ú-–î–î - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n" +
			"/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n" +
			"/done <id> - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n" +
			"/edit <id> –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É\n" +
			"/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
		
		log.Printf("Message from @%s: %s", c.Sender().Username, c.Text())
		return c.Send(text)
	})

	bot.Handle(telebot.OnText, func(c telebot.Context) error {
		text := "üìù –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–∫–∞ —á—Ç–æ —è —É–º–µ—é —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help"
		log.Printf("Message from @%s: %s", c.Sender().Username, c.Text())
		return c.Send(text)
	})

	bot.Handle(telebot.OnCommand, func(c telebot.Context) error {
		text := "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
		log.Printf("Unknown command from @%s: %s", c.Sender().Username, c.Text())
		return c.Send(text)
	})
}

func waitForShutdown(stopFunc func()) {
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	sig := <-sigChan
	log.Printf("Received signal %v, starting graceful shutdown...", sig)
	
	stopFunc()
	time.Sleep(2 * time.Second)
}
