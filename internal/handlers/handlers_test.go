package handlers

import (
	"testing"

	"telegram-bot-assistente/internal/models"

	"github.com/stretchr/testify/assert"
)

// mockTaskRepository is a simple mock for testing
type mockTaskRepository struct{}

func (m *mockTaskRepository) AddTask(task *models.Task) error                   { return nil }
func (m *mockTaskRepository) GetTask(id int) (*models.Task, error)              { return nil, nil }
func (m *mockTaskRepository) UpdateTask(task *models.Task) error                { return nil }
func (m *mockTaskRepository) DeleteTask(id int) error                           { return nil }
func (m *mockTaskRepository) GetTasksByUser(userID int) ([]*models.Task, error) { return nil, nil }
func (m *mockTaskRepository) GetActiveTasks(userID int) ([]*models.Task, error) { return nil, nil }
func (m *mockTaskRepository) GetTasksByStatus(userID int, status string) ([]*models.Task, error) {
	return nil, nil
}
func (m *mockTaskRepository) GetOverdueTasks(userID int) ([]*models.Task, error) { return nil, nil }

func createTestHandlers() *Handlers {
	return NewHandlers(&mockTaskRepository{})
}

// TestNewHandlers —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Handlers
func TestNewHandlers(t *testing.T) {
	handlers := createTestHandlers()
	assert.NotNil(t, handlers)
}

// TestValidateCommand —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
func TestValidateCommand(t *testing.T) {
	handlers := createTestHandlers()

	tests := []struct {
		name     string
		args     []string
		minArgs  int
		hasError bool
	}{
		{
			name:     "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
			args:     []string{"arg1", "arg2", "arg3"},
			minArgs:  2,
			hasError: false,
		},
		{
			name:     "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
			args:     []string{"arg1"},
			minArgs:  2,
			hasError: true,
		},
		{
			name:     "–†–æ–≤–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
			args:     []string{"arg1", "arg2"},
			minArgs:  2,
			hasError: false,
		},
		{
			name:     "–ù–æ–ª—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–∏ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–≥–æ",
			args:     []string{},
			minArgs:  1,
			hasError: true,
		},
		{
			name:     "–ú–∏–Ω–∏–º—É–º –Ω–æ–ª—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—Ö",
			args:     []string{},
			minArgs:  0,
			hasError: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := handlers.validateCommand(tt.args, tt.minArgs)
			if tt.hasError {
				assert.Error(t, err)
				assert.Contains(t, err.Error(), "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

// TestLogUserAction —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func TestLogUserAction(t *testing.T) {
	handlers := createTestHandlers()

	// –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –±–µ–∑ –ø–∞–Ω–∏–∫–∏
	assert.NotPanics(t, func() {
		handlers.logUserAction(12345, "test_action", "test details")
	})
}

// TestHandlersStructure —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
func TestHandlersStructure(t *testing.T) {
	handlers := createTestHandlers()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
	assert.NotNil(t, handlers)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫)
	assert.NotNil(t, handlers.handleStart)
	assert.NotNil(t, handlers.handleHelp)
	assert.NotNil(t, handlers.handleAdd)
	assert.NotNil(t, handlers.handleList)
	assert.NotNil(t, handlers.handleDone)
	assert.NotNil(t, handlers.handleEdit)
	assert.NotNil(t, handlers.handleMessage)
	assert.NotNil(t, handlers.handleCallback)
}

// TestMessageContent —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π
func TestMessageContent(t *testing.T) {
	t.Run("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã", func(t *testing.T) {
		// –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ø—Ä—è–º—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–¥–∞
		expectedElements := []string{
			"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
			"Task Assistant Bot",
			"/add",
			"/list",
			"/done",
			"/edit",
			"/help",
			"ü§ñ",
			"üìù",
			"üìã",
			"‚úÖ",
			"‚úèÔ∏è",
			"‚ùì",
		}

		// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ handlers.go
		welcomeMessage := `
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Assistant Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìù /add "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" —Å—Ä–æ–∫: 2025-07-15 - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
üìã /list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚úÖ /done [id] - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
‚úèÔ∏è /edit [id] –Ω–æ–≤–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–æ–∫: ... - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏—Ö –∫ –∑–∞–¥–∞—á–∞–º –∫–∞–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.

–£–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è! üöÄ
`

		for _, element := range expectedElements {
			assert.Contains(t, welcomeMessage, element, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å: %s", element)
		}
	})

	t.Run("–°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã", func(t *testing.T) {
		expectedElements := []string{
			"–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
			"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
			"–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á",
			"–û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
			"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
			"–§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç",
			"2025-07-15",
			"DD.MM.YYYY",
			"DD/MM/YYYY",
			"YYYY-MM-DD",
		}

		// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ handlers.go
		helpMessage := `
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
/add "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" —Å—Ä–æ–∫: 2025-07-15
–ü—Ä–∏–º–µ—Ä: /add "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã" —Å—Ä–æ–∫: 2025-07-20

üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á:
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Ä–æ–∫—É)

‚úÖ –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
/done [id] - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
–ü—Ä–∏–º–µ—Ä: /done 3

‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:
/edit [id] –Ω–æ–≤–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–æ–∫: 2025-07-25
–ü—Ä–∏–º–µ—Ä: /edit 2 "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏—Ç—å —É–∂–∏–Ω" —Å—Ä–æ–∫: 2025-07-21

üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏—è:
–ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∑–∞–¥–∞—á–∞–º

üìä –§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç:
- 2025-07-15 (YYYY-MM-DD)
- 15.07.2025 (DD.MM.YYYY)
- 15/07/2025 (DD/MM/YYYY)

‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
`

		for _, element := range expectedElements {
			assert.Contains(t, helpMessage, element, "–°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å: %s", element)
		}
	})
}

// TestErrorMessages —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
func TestErrorMessages(t *testing.T) {
	t.Run("–°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ", func(t *testing.T) {
		expectedErrorMessages := []string{
			"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
			"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		}

		for _, msg := range expectedErrorMessages {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∑–∏
			assert.Contains(t, msg, "‚ùå", "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏")
			assert.Contains(t, msg, "–ü—Ä–æ–∏–∑–æ—à–ª–∞", "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
		}
	})
}

// TestInDevelopmentMessages —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
func TestInDevelopmentMessages(t *testing.T) {
	developmentMessage := "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

	assert.Contains(t, developmentMessage, "üöß", "–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏")
	assert.Contains(t, developmentMessage, "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É")
}
